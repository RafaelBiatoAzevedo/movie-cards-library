{"version":3,"sources":["images/Kingsglaive_Final_Fantasy_XV.jpg","images/Final_Fantasy_Spirits_Within.jpg","images/Ghost_In_The_Shell_2_0.jpg","images/Appleseed_Alpha.jpg","images/Resident_Evil_Vendetta.jpg","images/Jumanji.jpg","components/Loading.js","components/Header.js","components/CardMovie.js","services/movieData.js","services/movieAPI.js","components/Search.js","components/MovieForm.js","pages/EditMovie.js","pages/MovieDetails.js","pages/NewMovie.js","pages/MovieList.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Loading","className","Header","CardMovie","movie","title","subtitle","storyline","rating","imagePath","bookmarked","genre","id","src","alt","to","movies","Kingsglaive","FinalFantasy","GhostInTheShell","AppleseedAlpha","ResidentEvilVendetta","Junmanji","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovies","Promise","resolve","getMovie","movieId","find","mov","Number","searchByText","listMovies","text","filter","toUpperCase","includes","SearchBar","setMovies","useState","inputsForm","setInputsForm","useEffect","then","moviesFiltered","search","data-testid","value","onChange","evt","target","placeholder","name","type","renderInputSearch","htmlFor","renderSelectGenre","onClick","checked","renderRadioFavorite","MovieForm","setMovie","createTitle","createSubtitle","createImage","String","cols","rows","maxLength","createStoryline","createFavorite","createGenre","min","max","step","createRating","validationInputs","alert","renderAddButton","renderEditButton","EditMovie","props","setEditMovie","bind","state","editMovie","this","match","params","setState","updatedMovie","history","map","parseInt","push","Component","MovieDetails","fetchMovie","loading","status","renderBtnsDetails","renderCardDetails","NewMovie","setNewMovie","newMovie","movieData","nextId","length","MovieList","fetchMovies","Search","key","NotFound","App","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wIAAAA,EAAOC,QAAU,IAA0B,0D,mBCA3CD,EAAOC,QAAU,IAA0B,0D,mBCA3CD,EAAOC,QAAU,IAA0B,oD,mBCA3CD,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,oD,mBCA3CD,EAAOC,QAAU,IAA0B,qC,sNCQ5BC,MANf,WACE,OACE,wBAAIC,UAAU,WAAd,eCMWC,MARf,WACE,OACE,yBAAKD,UAAU,oBACb,wBAAIA,UAAU,gBAAd,yBC+BSE,MAhCf,YAA+B,IAAVC,EAAS,EAATA,MACXC,EAAyED,EAAzEC,MAAOC,EAAkEF,EAAlEE,SAAUC,EAAwDH,EAAxDG,UAAWC,EAA6CJ,EAA7CI,OAAQC,EAAqCL,EAArCK,UAAWC,EAA0BN,EAA1BM,WAAYC,EAAcP,EAAdO,MAAOC,EAAOR,EAAPQ,GAC1E,OACE,yBAAKX,UAAU,uBACb,yBAAKA,UAAU,WAAWY,IAAMJ,EAAYK,IAAI,iBAChD,yBAAKb,UAAU,uBACb,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,cAAeI,GAC1BK,GAAe,0BAAMT,UAAU,cAAhB,iBAEpB,wBAAIA,UAAU,iBAAd,UAAmCK,EAAnC,aAAgDK,EAAhD,MACA,uBAAGV,UAAU,kBAAmBM,GAChC,uBAAGN,UAAU,eAAb,iBAAuCO,IACvC,kBAAC,IAAD,CAAMP,UAAU,eAAec,GAAE,kBAAcH,IAA/C,c,6HCsDOI,EA/DA,CACb,CACEJ,GAAI,EACJP,MAAO,cACPC,SAAU,mBACVC,UAAW,iKACXC,OAAQ,IACRC,UAAWQ,IACXP,YAAY,EACZC,MAAO,UAET,CACEC,GAAI,EACJP,MAAO,gBACPC,SAAU,iBACVC,UAAW,4HACXC,OAAQ,IACRC,UAAWS,IACXR,YAAY,EACZC,MAAO,WAET,CACEC,GAAI,EACJP,MAAO,qBACPC,SAAU,qBACVC,UAAW,qJACXC,OAAQ,EACRC,UAAWU,IACXT,YAAY,EACZC,MAAO,UAET,CACEC,GAAI,EACJP,MAAO,kBACPC,SAAU,kBACVC,UAAW,2LACXC,OAAQ,IACRC,UAAWW,IACXV,YAAY,EACZC,MAAO,UAET,CACEC,GAAI,EACJP,MAAO,gBACPC,SAAU,WACVC,UAAW,iKACXC,OAAQ,IACRC,UAAWY,IACXX,YAAY,EACZC,MAAO,UAET,CACEC,GAAI,EACJP,MAAO,UACPC,SAAU,wBACVC,UAAW,0JACXC,OAAQ,IACRC,UAAWa,IACXZ,YAAY,EACZC,MAAO,WCjEXY,aAAaC,QAAQ,SAAUC,KAAKC,UAAUC,IAE9C,IAAMC,EAAa,kBAAMH,KAAKI,MAAMN,aAAaO,QAAQ,YACnDC,EAAa,SAACf,GAAD,OAAYO,aAAaC,QAAQ,SAAUC,KAAKC,UAAUV,KAKvEgB,EAAkB,SAACC,GAAD,OAAc,SAACC,GACrCC,YAAW,WACTD,EAASD,KALG,OASHG,EAAY,kBACvB,IAAIC,SAAQ,SAACC,GACX,IAAMtB,EAASY,IACfI,EAAgBhB,EAAhBgB,CAAwBM,OAIfC,EAAW,SAACC,GAAD,OACtB,IAAIH,SAAQ,SAACC,GACX,IAAMlC,EAAQwB,IAAaa,MAAK,SAACC,GAAD,OAASA,EAAI9B,KAAO+B,OAAOH,MAC3DR,EAAgB5B,EAAhB4B,CAAuBM,OCrB3B,SAASM,EAAaC,EAAYC,GAChC,OAAOD,EAAWE,QAAO,SAAC3C,GAAD,OACvBA,EAAMC,MAAM2C,cAAcC,SAASH,EAAKE,gBACnC5C,EAAME,SAAS0C,cAAcC,SAASH,EAAKE,gBAC3C5C,EAAMG,UAAUyC,cAAcC,SAASH,EAAKE,kBAuHtCE,MAzBf,YAAmC,IAAdC,EAAa,EAAbA,UAAa,EACIC,mBAAS,CAC3CN,KAAM,GAAInC,MAAO,MAAOD,YAAY,IAFN,mBACzB2C,EADyB,KACbC,EADa,KAOhC,OAFAC,qBAAU,kBA/FZ,SAAgBF,EAAYF,GAAY,IAC9BL,EAA4BO,EAA5BP,KAAMnC,EAAsB0C,EAAtB1C,MAAOD,EAAe2C,EAAf3C,WACrB0B,IAAYoB,MAAK,SAACxC,GAChB,IAAIyC,EAAiBzC,EACrB,OAAQL,GACR,IAAK,SACH8C,EAAiBA,EAAeV,QAAO,SAAC3C,GAAD,MAA2B,WAAhBA,EAAMO,SACpDmC,IAAMW,EAAiBb,EAAaa,EAAgBX,IACpDpC,IAAY+C,EAAiBA,EAAeV,QAAO,SAAC3C,GAAD,OAAWA,EAAMM,eACxE,MACF,IAAK,SACH+C,EAAiBA,EAAeV,QAAO,SAAC3C,GAAD,MAA2B,WAAhBA,EAAMO,SACpDmC,IAAMW,EAAiBb,EAAaa,EAAgBX,IACpDpC,IAAY+C,EAAiBA,EAAeV,QAAO,SAAC3C,GAAD,OAAWA,EAAMM,eACxE,MACF,IAAK,WACH+C,EAAiBA,EAAeV,QAAO,SAAC3C,GAAD,MAA2B,aAAhBA,EAAMO,SACpDmC,IAAMW,EAAiBb,EAAaa,EAAgBX,IACpDpC,IAAY+C,EAAiBA,EAAeV,QAAO,SAAC3C,GAAD,OAAWA,EAAMM,eACxE,MACF,IAAK,SACH+C,EAAiBA,EAAeV,QAAO,SAAC3C,GAAD,MAA2B,WAAhBA,EAAMO,SACpDmC,IAAMW,EAAiBb,EAAaa,EAAgBX,IACpDpC,IAAY+C,EAAiBA,EAAeV,QAAO,SAAC3C,GAAD,OAAWA,EAAMM,eACxE,MACF,QACMoC,IAAMW,EAAiBb,EAAaa,EAAgBX,IACpDpC,IAAY+C,EAAiBA,EAAeV,QAAO,SAAC3C,GAAD,OAAWA,EAAMM,eAE1EyC,EAAUM,MAkEIC,CAAOL,EAAYF,KAAY,CAACE,IAG9C,yBAAKpD,UAAU,oBACb,kBAAC,IAAD,CAAMA,UAAU,cAAcc,GAAG,eAAjC,aACA,0BAAM4C,cAAY,kBAAkB1D,UAAU,mBAnEpD,SAA2BoD,EAAYC,GAAgB,IAC7CR,EAASO,EAATP,KACR,OACE,2BACEc,MAAQd,EACRe,SAAW,SAACC,GAAD,OAASR,EAAc,2BAAKD,GAAN,IAAkBP,KAAMgB,EAAIC,OAAOH,UACpE3D,UAAU,eACV+D,YAAY,yBACZC,KAAK,aACLC,KAAK,OACLtD,GAAG,qBA0DCuD,CAAkBd,EAAYC,GAChC,yBAAKrD,UAAU,kCAtDvB,SAA2BoD,EAAYC,GAAgB,IAC7C3C,EAAU0C,EAAV1C,MACR,OACE,2BAAOyD,QAAQ,eAAeT,cAAY,sBACtC,SACF,4BACEC,MAAQjD,EACRkD,SAAW,SAACC,GAAD,OAASR,EAAc,2BAAKD,GAAN,IAAkB1C,MAAOmD,EAAIC,OAAOH,UACrE3D,UAAU,gBACVgE,KAAK,gBACLrD,GAAG,gBAEH,4BAAQgD,MAAM,GAAGD,cAAY,iBAA7B,OACA,4BAAQC,MAAM,SAASD,cAAY,iBAAnC,UACA,4BAAQC,MAAM,SAASD,cAAY,iBAAnC,UACA,4BAAQC,MAAM,WAAWD,cAAY,iBAArC,YACA,4BAAQC,MAAM,SAASD,cAAY,iBAAnC,YAuCIU,CAAkBhB,EAAYC,GAjC1C,SAA6BD,EAAYC,GAAgB,IAC/C5C,EAAe2C,EAAf3C,WACR,OACE,2BACET,UAAU,iBACVmE,QAAQ,iBACRT,cAAY,wBAEZ,2BACEC,MAAQlD,EACR4D,QAAU,SAACR,GAAD,OAASR,EAAc,2BAAKD,GAAN,IAAkB3C,WAAYoD,EAAIC,OAAOQ,YACzEL,KAAK,WACLtD,GAAG,iBACH+C,cAAY,mBAEb,cAmBKa,CAAoBnB,EAAYC,OCoJ7BmB,MA9Bf,YAA+C,IAA1BP,EAAyB,EAAzBA,KAAM9D,EAAmB,EAAnBA,MAAOsE,EAAY,EAAZA,SAAY,EACRtB,mBAAShD,GADD,mBACrCiD,EADqC,KACzBC,EADyB,KAE5C,OACE,yBAAKrD,UAAU,uBACb,0BAAM0D,cAAY,iBAAiB1D,UAAU,sBAC3C,wBAAIA,UAAU,sBAAd,2BACA,yBAAKA,UAAU,gCA7OvB,SAAqBoD,EAAYC,GAAgB,IACvCjD,EAAUgD,EAAVhD,MACR,OACE,6BACE,2BACEJ,UAAU,kBACVmE,QAAQ,cACRT,cAAY,qBAHd,SAOA,2BACEC,MAAQvD,EACRwD,SAAW,SAACC,GAAD,OAASR,EAAc,2BAAKD,GAAN,IAAkBhD,MAAOyD,EAAIC,OAAOH,UACrE3D,UAAU,YACViE,KAAK,OACLtD,GAAG,cACH+C,cAAY,cACZM,KAAK,WA4NDU,CAAYtB,EAAYC,GAtNpC,SAAwBD,EAAYC,GAAgB,IAC1ChD,EAAa+C,EAAb/C,SACR,OACE,6BACE,2BACEL,UAAU,kBACVmE,QAAQ,iBACRT,cAAY,wBAHd,YAOA,2BACEC,MAAQtD,EACRuD,SAAW,SAACC,GAAD,OAASR,EAAc,2BAAKD,GAAN,IAAkB/C,SAAUwD,EAAIC,OAAOH,UACxE3D,UAAU,YACViE,KAAK,OACLtD,GAAG,iBACH+C,cAAY,iBACZM,KAAK,cAqMDW,CAAevB,EAAYC,IA/LvC,SAAqBD,EAAYC,GAAgB,IACvC7C,EAAc4C,EAAd5C,UACR,OACE,6BACE,2BACER,UAAU,kBACVmE,QAAQ,cACRT,cAAY,qBAHd,SAOA,2BACEC,MAAQnD,EACRoD,SAAW,SAACC,GAAD,OAASR,EAAc,2BAAKD,GAAN,IAAkB5C,UAAWqD,EAAIC,OAAOH,UACzEI,YAAY,YACZ/D,UAAU,sBACViE,KAAK,OACLtD,GAAG,cACH+C,cAAY,cACZM,KAAK,eA8KHY,CAAYxB,EAAYC,GAxKlC,SAAyBD,EAAYC,GAAgB,IAC3C/C,EAAc8C,EAAd9C,UACR,OACE,yBAAKN,UAAU,sBACb,2BACEA,UAAU,kBACVmE,QAAQ,mBACRT,cAAY,yBAHd,aAOA,8BACEC,MAAQrD,EACRsD,SAAW,SAACC,GAAD,OAASR,EAAc,2BAAKD,GAAN,IAAkB9C,UAAWuE,OAAOhB,EAAIC,OAAOH,WAChF3D,UAAU,2BACVW,GAAG,mBACH+C,cAAY,kBACZoB,KAAK,KACLC,KAAK,IACLf,KAAK,YACLgB,UAAU,SAqJRC,CAAgB7B,EAAYC,GAlHtC,SAAwBD,EAAYC,GAAgB,IAC1C5C,EAAe2C,EAAf3C,WACR,OACE,6BACE,2BAAO0D,QAAQ,kBAAkBnE,UAAU,mBACzC,2BACEsE,QAAU7D,EACV4D,QACE,SAACR,GAAD,OAASR,EAAc,2BAAKD,GAAN,IAAkB3C,WAAYoD,EAAIC,OAAOQ,YAEjEtE,UAAU,YACVW,GAAG,kBACHsD,KAAK,aART,eA+GIiB,CAAe9B,EAAYC,GAC7B,yBAAKrD,UAAU,gCA/FvB,SAAqBoD,EAAYC,GAAgB,IACvC3C,EAAU0C,EAAV1C,MACR,OACE,6BACE,2BACEV,UAAU,kBACVmE,QAAQ,eACRT,cAAY,qBAHd,SAOA,4BACEC,MAAQjD,EACRkD,SAAW,SAACC,GAAD,OAASR,EAAc,2BAAKD,GAAN,IAAkB1C,MAAOmD,EAAIC,OAAOH,UACrE3D,UAAU,sBACVW,GAAG,eACH+C,cAAY,cACZM,KAAK,SAEL,4BAAQL,MAAM,SAASD,cAAY,gBAAnC,UACA,4BAAQC,MAAM,SAASD,cAAY,gBAAnC,UACA,4BAAQC,MAAM,WAAWD,cAAY,gBAArC,cA2EIyB,CAAY/B,EAAYC,GAhJpC,SAAsBD,EAAYC,GAAgB,IACxC9C,EAAW6C,EAAX7C,OACR,OACE,6BACE,2BACEP,UAAU,kBACVmE,QAAQ,eACRT,cAAY,sBAHd,UAOA,2BACEC,MAAQpD,EACRqD,SAAW,SAACC,GAAD,OAASR,EAAc,2BAAKD,GAAN,IAAkB7C,OAAQsD,EAAIC,OAAOH,UACtE3D,UAAU,sBACViE,KAAK,SACLtD,GAAG,eACH+C,cAAY,eACZM,KAAK,SACLoB,IAAI,IACJC,IAAI,IACJC,KAAK,SA4HDC,CAAanC,EAAYC,IAE7B,yBAAKrD,UAAU,sBACD,QAATiE,EAnEb,SAAyBb,EAAYqB,GACnC,OACE,yBAAKzE,UAAU,iBACb,4BACEqE,QAAU,YAVlB,SAA0BjB,GAAa,IAC7BhD,EAA+BgD,EAA/BhD,MAAOC,EAAwB+C,EAAxB/C,SAAUG,EAAc4C,EAAd5C,UACzB,SAAIJ,GAASC,GAAYG,GASbgF,CAAiBpC,GAChBqC,MAAM,uBADuBhB,EAASrB,IAG7CpD,UAAU,WACViE,KAAK,SACLP,cAAY,eAPd,cAgEyBgC,CAAgBtC,EAAYqB,GAjD3D,SAA0BrB,EAAYqB,GACpC,OACE,yBAAKzE,UAAU,iBACb,4BACEqE,QAAU,kBAAMI,EAASrB,IACzBpD,UAAU,WACViE,KAAK,SACLP,cAAY,eAJd,eA8CiEiC,CAAiBvC,EAAYqB,GAhChG,yBAAKzE,UAAU,iBACb,kBAAC,IAAD,CAAMc,GAAG,wBACP,4BACEd,UAAU,WACViE,KAAK,SACLP,cAAY,iBAHd,gBCvLOkC,E,kDAnCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,MAAQ,CACXC,UAAW,MAJI,E,gEAQE,IAAD,OAEZtF,EADYuF,KAAKL,MAAfM,MACSC,OAAOzF,GACxB2B,EAAS3B,GAAI4C,MAAK,SAACpD,GAAD,OAAW,EAAKkG,SAAS,CAAEJ,UAAW9F,S,mCAG7C8F,GAAY,IHWCK,EGVhBC,EAAYL,KAAKL,MAAjBU,QHUgBD,EGTZL,EHUd,IAAI7D,SAAQ,SAACC,GACX,IAAMtB,EAASY,IAAa6E,KAAI,SAACrG,GAC/B,OAAIA,EAAMQ,KAAO8F,SAASH,EAAa3F,GAAI,IAClC,2BAAKR,GAAUmG,GAEjBnG,KAET2B,EAAWf,GACXgB,EA/BmB,KA+BnBA,CAAgCM,MGjBhCkE,EAAQG,KAAK,0B,+BAGL,IACAT,EAAcC,KAAKF,MAAnBC,UAER,OACE,yBAAKvC,cAAY,cACf,kBAAC,EAAD,MAEiB,OAAduC,GACE,kBAAC,EAAD,CAAWhC,KAAK,OAAO9D,MAAQ8F,EAAYxB,SAAWyB,KAAKJ,oB,GA7BhDa,aCoFTC,E,kDAhFb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IACDgB,WAAa,EAAKA,WAAWd,KAAhB,gBAClB,EAAKC,MAAQ,CACXc,SAAS,EACT3G,MAAO,IALQ,E,gEAUjB+F,KAAKW,e,mCAGO,IAAD,OAEHlG,EADUuF,KAAKL,MAAfM,MACaC,OAAbzF,GACR2B,EAAS3B,GAAI4C,MAAK,SAACpD,GAAD,OAAW,EAAKkG,SAAS,CAAES,SAAS,EAAO3G,e,0CAG1C,IAEXQ,EADUuF,KAAKF,MAAf7F,MACAQ,GACR,OACE,yBAAKX,UAAU,0BACb,kBAAC,IAAD,CAAMA,UAAU,eAAec,GAAE,kBAAcH,EAAd,UAC/B,4BAAQX,UAAU,uBAAuBiE,KAAK,UAA9C,SAEF,kBAAC,IAAD,CAAMjE,UAAU,eAAec,GAAG,wBAChC,4BAAQd,UAAU,uBAAuBiE,KAAK,UAA9C,SAEF,kBAAC,IAAD,CAAMjE,UAAU,eAAec,GAAG,uBAAuBuD,QAAU,kBJgB/C9B,EIhBiE5B,EJiBpF,IAAIyB,SAAQ,SAACC,GAClB,IAAItB,EAASY,IACbZ,EAASA,EAAO+B,QAAO,SAAC3C,GAAD,OAAWA,EAAMQ,KAAO8F,SAASlE,EAAS,OACjET,EAAWf,GACXgB,EAAgB,CAAEgF,OAnDC,MAmDnBhF,CAA4CM,MALrB,IAACE,IIflB,4BAAQvC,UAAU,uBAAuBiE,KAAK,UAA9C,a,0CAMa,IACX9D,EAAU+F,KAAKF,MAAf7F,MACAC,EAAqED,EAArEC,MAAOC,EAA8DF,EAA9DE,SAAUC,EAAoDH,EAApDG,UAAWC,EAAyCJ,EAAzCI,OAAQC,EAAiCL,EAAjCK,UAAWC,EAAsBN,EAAtBM,WAAYC,EAAUP,EAAVO,MACnE,OACE,yBAAKV,UAAU,oCACb,yBAAKA,UAAU,cAAcY,IAAMJ,EAAYK,IAAI,iBACnD,yBAAKb,UAAU,oCACb,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,cAAeI,GAC1BK,GAAe,0BAAMT,UAAU,cAAhB,iBAEpB,wBAAIA,UAAU,iBAAd,UAAmCK,EAAnC,aAAgDK,EAAhD,MACA,uBAAGV,UAAU,kBAAmBM,GAChC,uBAAGN,UAAU,eAAb,iBAAuCO,IACrC2F,KAAKc,wB,+BAML,IACAF,EAAYZ,KAAKF,MAAjBc,QACR,OACE,6BACE,kBAAC,EAAD,MACA,yBAAK9G,UAAU,yBAAyB0D,cAAY,iBAE/CoD,EAAW,kBAAC,EAAD,MAAcZ,KAAKe,0B,GAjEhBN,aCyCZO,E,kDA1Cb,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IACDsB,YAAc,EAAKA,YAAYpB,KAAjB,gBACnB,EAAKC,MAAQ,CACXoB,SAAU,CACRhH,MAAO,GACPC,SAAU,GACVC,UAAW,GACXC,OAAQ,EACRC,UAAW,GACXE,MAAO,WAVM,E,iEAeG,ILsBI2G,EKrBhBd,EAAYL,KAAKL,MAAjBU,QACAa,EAAalB,KAAKF,MAAlBoB,SLoBgBC,EKnBZD,ELoBd,IAAIhF,SAAQ,SAACC,GACX,IAAItB,EAASY,IACP2F,EAASvG,EAAOA,EAAOwG,OAAS,GAAG5G,GAAK,EACxCyG,EAAQ,2BAAQC,GAAR,IAAmB1G,GAAI2G,IACrCvG,EAAM,sBAAOA,GAAP,CAAeqG,IACrBtF,EAAWf,GACXgB,EA1CmB,KA0CnBA,CAAgCM,MKzBhCkE,EAAQG,KAAK,0B,kCAGHU,GACVlB,KAAKG,SAAS,CAAEe,e,+BAGR,IACAA,EAAalB,KAAKF,MAAlBoB,SAER,OACE,yBAAK1D,cAAY,aACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWO,KAAK,MAAM9D,MAAQiH,EAAW3C,SAAWyB,KAAKiB,mB,GAjC1CR,aCuCRa,E,kDAvCb,aAAe,IAAD,8BACZ,gBACKC,YAAc,EAAKA,YAAY1B,KAAjB,gBACnB,EAAK7C,UAAY,EAAKA,UAAU6C,KAAf,gBACjB,EAAKC,MAAQ,CACXc,SAAS,EACT/F,OAAQ,IANE,E,gEAWZmF,KAAKuB,gB,gCAGG1G,GACRmF,KAAKG,SAAS,CAAEtF,a,oCAGH,IAAD,OACZoB,IAAYoB,MAAK,SAACxC,GAAD,OAAY,EAAKsF,SAAS,CAAES,SAAS,EAAO/F,gB,+BAGrD,IAAD,EACqBmF,KAAKF,MAAzBjF,EADD,EACCA,OAAQ+F,EADT,EACSA,QAChB,OACE,yBAAK9G,UAAU,kBACb,kBAAC,EAAD,MACA,kBAAC0H,EAAD,CAAQxE,UAAYgD,KAAKhD,YACtB4D,GAAY,kBAAC,EAAD,MACf,yBAAKpD,cAAY,cACf,yBAAK1D,UAAU,oBACZe,EAAOyF,KAAI,SAACrG,GAAD,OAAW,kBAAC,EAAD,CAAWwH,IAAMxH,EAAMQ,GAAKR,MAAQA,c,GAhC/CwG,aCITiB,E,uKAJX,OAAO,yBAAKlE,cAAY,aAAjB,sB,GAFYiD,a,MC0BRkB,MAnBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UAAYd,IAC5C,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,mBAAmBC,UAAYpC,IACjD,kBAAC,IAAD,CACEkC,OAAK,EACLC,KAAK,cACLE,OAAS,SAACpC,GAAD,OAAW,kBAAC,EAAkBA,MAEzC,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,uBAAuBC,UAAYR,IACrD,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,IAAIC,UAAYR,IAClC,kBAAC,IAAD,CAAOO,KAAK,IAAIC,UAAYJ,OCVhBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlC,MACvB,2DCZNmC,IAASL,OAAO,kBAAC,EAAD,MAASM,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpF,MAAK,SAAAqF,GACjCA,EAAaC,kB","file":"static/js/main.18edf522.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Kingsglaive_Final_Fantasy_XV.917daac0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Final_Fantasy_Spirits_Within.0d8b80ec.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Ghost_In_The_Shell_2_0.7d6b4f9c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Appleseed_Alpha.498ae78a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Resident_Evil_Vendetta.77c10ef3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Jumanji.6dfa5fd7.jpg\";","import React from 'react';\n\nfunction Loading() {\n  return (\n    <h2 className=\"loading\">Loading...</h2>\n  );\n}\n\nexport default Loading;\n","import React from 'react';\n\nfunction Header() {\n  return (\n    <div className=\"container-header\">\n      <h1 className=\"title-header\">Movie Cards Library</h1>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { shape, string, bool, number } from 'prop-types';\n\nfunction CardMovie({ movie }) {\n  const { title, subtitle, storyline, rating, imagePath, bookmarked, genre, id } = movie;\n  return (\n    <div className=\"container-cardMovie\">\n      <img className=\"img-card\" src={ imagePath } alt=\"moviePicture\" />\n      <div className=\"container-info-card\">\n        <div className=\"container-title-card\">\n          <h2 className=\"title-card\">{ title }</h2>\n          { (bookmarked) && <span className=\"title-card\">&#127775;</span> }\n        </div>\n        <h4 className=\"subtitle-card\">{ `${subtitle} (${genre})` }</h4>\n        <p className=\"storyline-card\">{ storyline }</p>\n        <p className=\"rating-card\">{ `Rating ${rating}` }</p>\n        <Link className=\"link-details\" to={ `/movies/${id}` }>DETAILS</Link>\n      </div>\n    </div>\n  );\n}\n\nCardMovie.propTypes = {\n  movie: shape({\n    title: string,\n    subtitle: string,\n    storyline: string,\n    rating: number,\n    imagePath: string,\n    bookmarked: bool,\n    genre: string,\n    id: number,\n  }).isRequired,\n};\n\nexport default CardMovie;\n","import Kingsglaive from '../images/Kingsglaive_Final_Fantasy_XV.jpg';\nimport FinalFantasy from '../images/Final_Fantasy_Spirits_Within.jpg';\nimport GhostInTheShell from '../images/Ghost_In_The_Shell_2_0.jpg';\nimport AppleseedAlpha from '../images/Appleseed_Alpha.jpg';\nimport ResidentEvilVendetta from '../images/Resident_Evil_Vendetta.jpg';\nimport Junmanji from '../images/Jumanji.jpg';\n\n\nconst movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: Kingsglaive,\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: FinalFantasy,\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: GhostInTheShell,\n    bookmarked: false,\n    genre: 'terror',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: AppleseedAlpha,\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: ResidentEvilVendetta,\n    bookmarked: true,\n    genre: 'terror',\n  },\n  {\n    id: 6,\n    title: 'Jumanji',\n    subtitle: 'Welcome to the Jungle',\n    storyline: 'The story focuses on a group of teenagers who come across Jumanji now transformed into a video game twenty-one years after the events of the 1995 film.',\n    rating: 4.9,\n    imagePath: Junmanji,\n    bookmarked: true,\n    genre: 'comedy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 500;\nconst SUCCESS_STATUS = 'OK';\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => (\n  new Promise((resolve) => {\n    const movie = readMovies().find((mov) => mov.id === Number(movieId));\n    simulateRequest(movie)(resolve);\n  })\n);\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  return new Promise((resolve) => {\n    let movies = readMovies();\n    movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n    saveMovies(movies);\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { func } from 'prop-types';\nimport { getMovies } from '../services/movieAPI';\n\nfunction searchByText(listMovies, text) {\n  return listMovies.filter((movie) => (\n    movie.title.toUpperCase().includes(text.toUpperCase())\n      || movie.subtitle.toUpperCase().includes(text.toUpperCase())\n      || movie.storyline.toUpperCase().includes(text.toUpperCase())\n  ));\n}\n\nfunction search(inputsForm, setMovies) {\n  const { text, genre, bookmarked } = inputsForm;\n  getMovies().then((movies) => {\n    let moviesFiltered = movies;\n    switch (genre) {\n    case 'action':\n      moviesFiltered = moviesFiltered.filter((movie) => movie.genre === 'action');\n      if (text) moviesFiltered = searchByText(moviesFiltered, text);\n      if (bookmarked) moviesFiltered = moviesFiltered.filter((movie) => movie.bookmarked);\n      break;\n    case 'comedy':\n      moviesFiltered = moviesFiltered.filter((movie) => movie.genre === 'comedy');\n      if (text) moviesFiltered = searchByText(moviesFiltered, text);\n      if (bookmarked) moviesFiltered = moviesFiltered.filter((movie) => movie.bookmarked);\n      break;\n    case 'thriller':\n      moviesFiltered = moviesFiltered.filter((movie) => movie.genre === 'thriller');\n      if (text) moviesFiltered = searchByText(moviesFiltered, text);\n      if (bookmarked) moviesFiltered = moviesFiltered.filter((movie) => movie.bookmarked);\n      break;\n    case 'terror':\n      moviesFiltered = moviesFiltered.filter((movie) => movie.genre === 'terror');\n      if (text) moviesFiltered = searchByText(moviesFiltered, text);\n      if (bookmarked) moviesFiltered = moviesFiltered.filter((movie) => movie.bookmarked);\n      break;\n    default:\n      if (text) moviesFiltered = searchByText(moviesFiltered, text);\n      if (bookmarked) moviesFiltered = moviesFiltered.filter((movie) => movie.bookmarked);\n    }\n    setMovies(moviesFiltered);\n  });\n}\n\nfunction renderInputSearch(inputsForm, setInputsForm) {\n  const { text } = inputsForm;\n  return (\n    <input\n      value={ text }\n      onChange={ (evt) => setInputsForm({ ...inputsForm, text: evt.target.value }) }\n      className=\"input-search\"\n      placeholder=\"Insert text for search\"\n      name=\"searchText\"\n      type=\"text\"\n      id=\"input-searchText\"\n    />\n  );\n}\n\nfunction renderSelectGenre(inputsForm, setInputsForm) {\n  const { genre } = inputsForm;\n  return (\n    <label htmlFor=\"select-genre\" data-testid=\"select-input-label\">\n      { 'Genre ' }\n      <select\n        value={ genre }\n        onChange={ (evt) => setInputsForm({ ...inputsForm, genre: evt.target.value }) }\n        className=\"select-search\"\n        name=\"selectedGenre\"\n        id=\"select-genre\"\n      >\n        <option value=\"\" data-testid=\"select-option\">All</option>\n        <option value=\"action\" data-testid=\"select-option\">Action</option>\n        <option value=\"comedy\" data-testid=\"select-option\">Comedy</option>\n        <option value=\"thriller\" data-testid=\"select-option\">Thriller</option>\n        <option value=\"terror\" data-testid=\"select-option\">Terror</option>\n      </select>\n    </label>\n  );\n}\n\nfunction renderRadioFavorite(inputsForm, setInputsForm) {\n  const { bookmarked } = inputsForm;\n  return (\n    <label\n      className=\"label-favorite\"\n      htmlFor=\"input-checkbox\"\n      data-testid=\"checkbox-input-label\"\n    >\n      <input\n        value={ bookmarked }\n        onClick={ (evt) => setInputsForm({ ...inputsForm, bookmarked: evt.target.checked }) }\n        type=\"checkbox\"\n        id=\"input-checkbox\"\n        data-testid=\"checkbox-input\"\n      />\n      {' Favorites'}\n    </label>\n  );\n}\n\nfunction SearchBar({ setMovies }) {\n  const [inputsForm, setInputsForm] = useState({\n    text: '', genre: 'All', bookmarked: false,\n  });\n\n  useEffect(() => search(inputsForm, setMovies), [inputsForm]);\n\n  return (\n    <div className=\"container-search\">\n      <Link className=\"link-search\" to=\"/movies/new\">ADD MOVIE</Link>\n      <form data-testid=\"search-bar-form\" className=\"input-container\">\n        { renderInputSearch(inputsForm, setInputsForm) }\n        <div className=\"container-input-genre-favorite\">\n          { renderSelectGenre(inputsForm, setInputsForm) }\n          { renderRadioFavorite(inputsForm, setInputsForm) }\n        </div>\n      </form>\n    </div>\n  );\n}\n\nSearchBar.propTypes = {\n  setMovies: func.isRequired,\n};\n\nexport default SearchBar;\n","import React, { useState } from 'react';\nimport { string } from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nfunction createTitle(inputsForm, setInputsForm) {\n  const { title } = inputsForm;\n  return (\n    <div>\n      <label\n        className=\"label-add-movie\"\n        htmlFor=\"input-title\"\n        data-testid=\"title-input-label\"\n      >\n        Title\n      </label>\n      <input\n        value={ title }\n        onChange={ (evt) => setInputsForm({ ...inputsForm, title: evt.target.value }) }\n        className=\"input-add\"\n        type=\"text\"\n        id=\"input-title\"\n        data-testid=\"title-input\"\n        name=\"title\"\n      />\n    </div>\n  );\n}\n\nfunction createSubtitle(inputsForm, setInputsForm) {\n  const { subtitle } = inputsForm;\n  return (\n    <div>\n      <label\n        className=\"label-add-movie\"\n        htmlFor=\"input-subtitle\"\n        data-testid=\"subtitle-input-label\"\n      >\n        Subtitle\n      </label>\n      <input\n        value={ subtitle }\n        onChange={ (evt) => setInputsForm({ ...inputsForm, subtitle: evt.target.value }) }\n        className=\"input-add\"\n        type=\"text\"\n        id=\"input-subtitle\"\n        data-testid=\"subtitle-input\"\n        name=\"subtitle\"\n      />\n    </div>\n  );\n}\n\nfunction createImage(inputsForm, setInputsForm) {\n  const { imagePath } = inputsForm;\n  return (\n    <div>\n      <label\n        className=\"label-add-movie\"\n        htmlFor=\"input-image\"\n        data-testid=\"image-input-label\"\n      >\n        Image\n      </label>\n      <input\n        value={ imagePath }\n        onChange={ (evt) => setInputsForm({ ...inputsForm, imagePath: evt.target.value }) }\n        placeholder=\"Url image\"\n        className=\"input-add image-add\"\n        type=\"text\"\n        id=\"input-image\"\n        data-testid=\"image-input\"\n        name=\"imagePath\"\n      />\n    </div>\n  );\n}\n\nfunction createStoryline(inputsForm, setInputsForm) {\n  const { storyline } = inputsForm;\n  return (\n    <div className=\"container-textArea\">\n      <label\n        className=\"label-add-movie\"\n        htmlFor=\"textarea-sinopse\"\n        data-testid=\"storyline-input-label\"\n      >\n        StoryLine\n      </label>\n      <textarea\n        value={ storyline }\n        onChange={ (evt) => setInputsForm({ ...inputsForm, storyline: String(evt.target.value) }) }\n        className=\"input-add input-textArea\"\n        id=\"textarea-sinopse\"\n        data-testid=\"storyline-input\"\n        cols=\"44\"\n        rows=\"5\"\n        name=\"storyline\"\n        maxLength=\"200\"\n      >\n        {}\n      </textarea>\n    </div>\n  );\n}\n\nfunction createRating(inputsForm, setInputsForm) {\n  const { rating } = inputsForm;\n  return (\n    <div>\n      <label\n        className=\"label-add-movie\"\n        htmlFor=\"input-rating\"\n        data-testid=\"rating-input-label\"\n      >\n        Rating\n      </label>\n      <input\n        value={ rating }\n        onChange={ (evt) => setInputsForm({ ...inputsForm, rating: evt.target.value }) }\n        className=\"input-add ratio-add\"\n        type=\"number\"\n        id=\"input-rating\"\n        data-testid=\"rating-input\"\n        name=\"rating\"\n        min=\"0\"\n        max=\"5\"\n        step=\"0.1\"\n      />\n    </div>\n  );\n}\n\nfunction createFavorite(inputsForm, setInputsForm) {\n  const { bookmarked } = inputsForm;\n  return (\n    <div>\n      <label htmlFor=\"radioIsFavorite\" className=\"label-add-movie\">\n        <input\n          checked={ bookmarked }\n          onClick={\n            (evt) => setInputsForm({ ...inputsForm, bookmarked: evt.target.checked })\n          }\n          className=\"input-add\"\n          id=\"radioIsFavorite\"\n          type=\"checkbox\"\n        />\n        IsFavorite\n      </label>\n    </div>\n  );\n\n}\n\nfunction createGenre(inputsForm, setInputsForm) {\n  const { genre } = inputsForm;\n  return (\n    <div>\n      <label\n        className=\"label-add-movie\"\n        htmlFor=\"input-select\"\n        data-testid=\"genre-input-label\"\n      >\n        Genre\n      </label>\n      <select\n        value={ genre }\n        onChange={ (evt) => setInputsForm({ ...inputsForm, genre: evt.target.value }) }\n        className=\"input-add genre-add\"\n        id=\"input-select\"\n        data-testid=\"genre-input\"\n        name=\"genre\"\n      >\n        <option value=\"action\" data-testid=\"genre-option\">Action</option>\n        <option value=\"comedy\" data-testid=\"genre-option\">Comedy</option>\n        <option value=\"thriller\" data-testid=\"genre-option\">Thriller</option>\n      </select>\n    </div>\n  );\n}\n\nfunction validationInputs(inputsForm) {\n  const { title, subtitle, imagePath } = inputsForm;\n  if (title && subtitle && imagePath) return true;\n  return false;\n}\n\nfunction renderAddButton(inputsForm, setMovie) {\n  return (\n    <div className=\"container-btn\">\n      <button\n        onClick={ () => {\n          if (validationInputs(inputsForm)) setMovie(inputsForm);\n          else alert('Invalid information');\n        } }\n        className=\"btn-form\"\n        type=\"button\"\n        data-testid=\"send-button\"\n      >\n        Add Movie\n      </button>\n    </div>\n  );\n}\n\nfunction renderEditButton(inputsForm, setMovie) {\n  return (\n    <div className=\"container-btn\">\n      <button\n        onClick={ () => setMovie(inputsForm) }\n        className=\"btn-form\"\n        type=\"button\"\n        data-testid=\"edit-button\"\n      >\n        Edit Movie\n      </button>\n    </div>\n  );\n}\n\nfunction renderCancelBtton() {\n  return (\n    <div className=\"container-btn\">\n      <Link to=\"/movie-cards-library\">\n        <button\n          className=\"btn-form\"\n          type=\"button\"\n          data-testid=\"cancel-button\"\n        >\n          Cancel\n        </button>\n      </Link>\n    </div>\n  );\n}\n\nfunction MovieForm({ type, movie, setMovie }) {\n  const [inputsForm, setInputsForm] = useState(movie);\n  return (\n    <div className=\"container-add-movie\">\n      <form data-testid=\"add-movie-form\" className=\"container-form-add\">\n        <h4 className=\"subtitle-add-movie\">Information about movie</h4>\n        <div className=\"container-inputs titles-form\">\n          { createTitle(inputsForm, setInputsForm) }\n          { createSubtitle(inputsForm, setInputsForm) }\n        </div>\n        { createImage(inputsForm, setInputsForm) }\n        { createStoryline(inputsForm, setInputsForm) }\n        { createFavorite(inputsForm, setInputsForm) }\n        <div className=\"container-inputs genre-input\">\n          { createGenre(inputsForm, setInputsForm) }\n          { createRating(inputsForm, setInputsForm) }\n        </div>\n        <div className=\"container-btn-form\">\n          { (type === 'Add') ? renderAddButton(inputsForm, setMovie) : renderEditButton(inputsForm, setMovie) }\n          { renderCancelBtton() }\n        </div>\n      </form>\n    </div>\n  );\n}\n\nMovieForm.propTypes = {\n  type: string.isRequired,\n};\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport { Header, MovieForm } from '../components';\nimport { getMovie, updateMovie } from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.setEditMovie = this.setEditMovie.bind(this);\n    this.state = {\n      editMovie: null,\n    };\n  }\n\n  componentDidMount() {\n    const { match } = this.props;\n    const id = match.params.id;\n    getMovie(id).then((movie) => this.setState({ editMovie: movie }));\n  }\n\n  setEditMovie(editMovie) {\n    const { history } = this.props;\n    updateMovie(editMovie);\n    history.push('/movie-cards-library');\n  }\n\n  render() {\n    const { editMovie } = this.state;\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <Header />\n        {\n          (editMovie !== null)\n          && <MovieForm type=\"Edit\" movie={ editMovie } setMovie={ this.setEditMovie } />\n        }\n      </div>\n    );\n  }\n}\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { getMovie, deleteMovie } from '../services/movieAPI';\nimport { Header, Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.fetchMovie = this.fetchMovie.bind(this);\n    this.state = {\n      loading: true,\n      movie: {},\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  fetchMovie() {\n    const { match } = this.props;\n    const { id } = match.params;\n    getMovie(id).then((movie) => this.setState({ loading: false, movie }));\n  }\n\n  renderBtnsDetails() {\n    const { movie } = this.state;\n    const { id } = movie;\n    return (\n      <div className=\"container-btns-details\">\n        <Link className=\"link-details\" to={ `/movies/${id}/edit` }>\n          <button className=\"btn-form btn-details\" type=\"button\">EDIT</button>\n        </Link>\n        <Link className=\"link-details\" to=\"/movie-cards-library\">\n          <button className=\"btn-form btn-details\" type=\"button\">BACK</button>\n        </Link>\n        <Link className=\"link-details\" to=\"/movie-cards-library\" onClick={ () => deleteMovie(id) }>\n          <button className=\"btn-form btn-details\" type=\"button\">DELET</button>\n        </Link>\n      </div>\n    );\n  }\n\n  renderCardDetails() {\n    const { movie } = this.state;\n    const { title, subtitle, storyline, rating, imagePath, bookmarked, genre } = movie;\n    return (\n      <div className=\"container-cardMovie card-details\">\n        <img className=\"img-details\" src={ imagePath } alt=\"moviePicture\" />\n        <div className=\"container-info-card info-details\">\n          <div className=\"container-title-card\">\n            <h2 className=\"title-card\">{ title }</h2>\n            { (bookmarked) && <span className=\"title-card\">&#127775;</span> }\n          </div>\n          <h4 className=\"subtitle-card\">{ `${subtitle} (${genre})` }</h4>\n          <p className=\"storyline-card\">{ storyline }</p>\n          <p className=\"rating-card\">{ `Rating ${rating}` }</p>\n          { this.renderBtnsDetails() }\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { loading } = this.state;\n    return (\n      <div>\n        <Header />\n        <div className=\"container-card-details\" data-testid=\"movie-details\">\n          {\n            (loading) ? <Loading /> : this.renderCardDetails()\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { func } from 'prop-types'; \nimport { Header, MovieForm } from '../components';\nimport { createMovie } from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.setNewMovie = this.setNewMovie.bind(this);\n    this.state = {\n      newMovie: {\n        title: '',\n        subtitle: '',\n        storyline: '',\n        rating: 0,\n        imagePath: '',\n        genre: 'action',\n      },\n    };\n  }\n\n  componentDidUpdate() {\n    const { history } = this.props;\n    const { newMovie } = this.state;\n    createMovie(newMovie);\n    history.push('/movie-cards-library');\n  }\n\n  setNewMovie(newMovie) {\n    this.setState({ newMovie });\n  }\n\n  render() {\n    const { newMovie } = this.state;\n\n    return (\n      <div data-testid=\"new-movie\">\n        <Header />\n        <MovieForm type=\"Add\" movie={ newMovie } setMovie={ this.setNewMovie } />\n      </div>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  history: func.isRequired,\n};\n\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport { Header, CardMovie, Search, Loading } from '../components';\nimport { getMovies } from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n    this.fetchMovies = this.fetchMovies.bind(this);\n    this.setMovies = this.setMovies.bind(this);\n    this.state = {\n      loading: true,\n      movies: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovies();\n  }\n\n  setMovies(movies) {\n    this.setState({ movies });\n  }\n\n  fetchMovies() {\n    getMovies().then((movies) => this.setState({ loading: false, movies }));\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n    return (\n      <div className=\"container-main\">\n        <Header />\n        <Search setMovies={ this.setMovies } />\n        { (loading) && <Loading /> }\n        <div data-testid=\"movie-list\">\n          <div className=\"container-movies\">\n            {movies.map((movie) => <CardMovie key={ movie.id } movie={ movie } />) }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Page not Found</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport EditMovie from './pages/EditMovie';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport MovieList from './pages/MovieList';\nimport NotFound from './pages/NotFound';\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/movies/new\" component={ NewMovie } />\n        <Route exact path=\"/movies/:id/edit\" component={ EditMovie } />\n        <Route\n          exact\n          path=\"/movies/:id\"\n          render={ (props) => <MovieDetails { ...props } /> }\n        />\n        <Route exact path=\"/movie-cards-library\" component={ MovieList } />\n        <Route exact path=\"/\" component={ MovieList } />\n        <Route path=\"*\" component={ NotFound } />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}